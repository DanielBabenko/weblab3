<project name="OPI3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${src.main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <path id="classpath.source">
        <fileset dir="src/main/lib" includes="**/*.jar"/>
    </path>

    <path id="classpath.testSource">
        <fileset dir="src/test/lib" includes="**/*.jar"/>
    </path>

    <path id="project.classpath">
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <path id="test.classpath">
        <path refid="project.classpath" />
        <pathelement location="${build.dir}/webapp/WEB-INF/classes" />
        <pathelement location="${build.dir}/test-classes" />
        <fileset dir="${lib.dir}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Clean -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="––– CLEAN DONE –––"/>
    </target>

    <!-- Compile -->
    <target name="compile" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.main.dir}" destdir="${classes.dir}" classpathref="classpath" source="1.8"
               includeantruntime="false"/>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <echo message="––– COMPILE DONE –––"/>
    </target>

    <!-- Build -->
    <target name="build" depends="compile">
        <copy todir="${artifact.dir}" >
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${artifact-lib.dir}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${artifact.dir}"/>
            <manifest>
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="NoClass" />
            </manifest>
        </jar>
        <echo message="––– BUILD DONE –––"/>
    </target>

    <target name="compileTest">
        <mkdir dir="${target.tests}"/>
        <javac destdir="${target.tests}"
               includeantruntime="false"
               srcdir="${test.source}"
               debug="on">
            <classpath refid="classpath.testSource"/>
        </javac>
    </target>

    <!-- Test -->
<!--    <target name="test" depends="compileTest">-->
<!--        <mkdir dir="${test.result.dir}"/>-->
<!--        <junitlauncher haltonfailure="true" printsummary="true">-->
<!--            <classpath refid="classpath.testSource"/>-->
<!--            <classpath>-->
<!--                <pathelement location="${target.tests}"/>-->
<!--            </classpath>-->
<!--            <testclasses outputdir="${test.result.dir}">-->
<!--                <fileset dir="${target.tests}">-->
<!--                    <include name="**/*.class"/>-->
<!--                </fileset>-->
<!--                <listener type="legacy-xml" sendSysOut="true"-->
<!--                          sendSysErr="true"/>-->
<!--            </testclasses>-->
<!--        </junitlauncher>-->
<!--        <echo message="Test completed"/>-->
<!--    </target>-->
<!--    <target name="test" depends="build">-->
<!--        <mkdir dir="${build.dir}/test-classes"/>-->
<!--        <javac srcdir="${test.dir}" destdir="${build.dir}/test-classes" includeantruntime="false" classpathref="test.classpath">-->
<!--            <compilerarg line="-Xlint:unchecked"/>-->
<!--        </javac>-->

<!--        <mkdir dir="${build.dir}/test-results"/>-->
<!--        <junitlauncher haltonfailure="true" printsummary="true">-->
<!--            <classpath>-->
<!--                <path refid="test.classpath"/>-->
<!--                <pathelement location="${build.dir}/test-classes"/>-->
<!--            </classpath>-->
<!--            <testclasses outputdir="${build.dir}/test-results">-->
<!--                <fileset dir="${build.dir}/test-classes" includes="**/*Test.java"/>-->
<!--                <listener type="legacy-xml" sendSysOut="true" sendSysErr="true"/>-->
<!--            </testclasses>-->
<!--        </junitlauncher>-->
<!--    </target>-->
    <path id="classpath.test">
        <pathelement location="${junit.lib}"/>
        <pathelement location="${hamcrest.lib}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="test" depends="build">
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" classpathref="classpath.testSource" includeantruntime="false"/>
        <junit printsummary="yes" haltonfailure="true" haltonerror="true">
            <classpath>
                <path refid="classpath.testSource"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
    </target>

        <!-- XML -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
        <echo message="––– XML VALIDATION COMPLETED –––"/>
    </target>

    <!-- ENV -->
    <target name="env" depends="scp">
        <echo>Starting web server...</echo>
        <sshexec host="${scp.host}"
                 username="${scp.user}"
                 password="${scp.password}"
                 port="${scp.port}"
                 trust="true"
                 command="sh ${env.script}"/>
    </target>

    <!-- Native2ASCII -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}/webapp/WEB-INF/classes" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
        <echo message="––– NATIVE2ASCII COMPLETED –––"/>
    </target>

    <!-- Doc -->
    <target name="doc" depends="build">
        <mkdir dir="docs"/>
        <signjar jar="${build.dir}/${ant.project.name}.jar"
                 alias="ant_keystore"
                 storepass="msc114"
                 keystore="keystore"
                 sigalg="MD5withRSA"
                 digestalg="SHA1"/>
        <javadoc
                destdir="docs"
                author="true"
                version="true"
                use="true">
            <classpath>
                <path refid="classpath"/>
            </classpath>
            <fileset dir="${src.main.dir}"/>
        </javadoc>
        <jar destfile="${build.dir}/${ant.project.name}.jar"
             basedir="docs"
             update="true">
        </jar>
    </target>

    <!-- SCP -->
    <target name="scp" depends="build">
        <echo>Connecting...</echo>
        <scp file="${build.dir}/${ant.project.name}.jar"
             todir="${scp.user}@${scp.host}:${scp.dir}"
             password="${scp.password}"
             port="${scp.port}"
             trust="true"/>
    </target>

<!--    <target name="scp" depends="build">-->
<!--        <sshexec-->
<!--                host="${scp.host}"-->
<!--                port="${scp.port}"-->
<!--                username="${scp.user}"-->
<!--                password="${scp.password}"-->
<!--                command="mkdir -p ${scp.dir}"-->
<!--                trust="true" />-->
<!--        <scp-->
<!--                file="${dist.jar}"-->
<!--                todir="${scp.user}@${scp.host}:${scp.dir}"-->
<!--                password="${scp.password}"-->
<!--                port="${scp.port}"/>-->
<!--    </target>-->

    <!-- History -->
    <target name="history">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="previous.revision" value="HEAD"/>
        <property name="found.working.revision" value="false"/>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${lib.dir}/ant-contrib.jar"/>
            </classpath>
        </taskdef>

        <foreach list="${previous.revision}" param="revision" target="find-working-revision">
            <param name="revision" value="${previous.revision}"/>
        </foreach>
    </target>

    <target name="find-working-revision">
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision}"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
                <echo>Found working revision: ${revision}</echo>
                <exec executable="git" output="${build.dir}/diff.txt" failonerror="false">
                    <arg value="diff"/>
                    <arg value="${revision}~1"/>
                    <arg value="${current.revision}"/>
                </exec>
                <exec executable="git" failonerror="false">
                    <arg value="checkout"/>
                    <arg value="${current.revision}"/>
                </exec>
                <fail message="Compilation fixed. Please check diff.txt for changes."/>
            </try>
            <catch>
                <echo>Compilation failed on revision: ${revision}. Checking previous revision...</echo>
            </catch>
        </trycatch>
    </target>

    <!-- Report -->
    <target name="report" depends="test" description="If all test pass then create junit, git add and commit">
        <mkdir dir="${doc.report.dir}"/>
        <copy todir="${doc.report.dir}">
            <fileset dir="${test.dir}" includes="*.xml"/>
        </copy>
        <sequential>
            <exec executable="git">
                <arg value="add"/>
                <arg value="${doc.report.dir}/*"/>
            </exec>
            <exec executable="git">
                <arg value="commit"/>
                <arg value="-m"/>
                <arg value="passed tests"/>
            </exec>
        </sequential>
    </target>

    <!-- Team -->
    <target name="team">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="revision1" value="${current.revision}~1"/>
        <property name="revision2" value="${current.revision}~2"/>

        <echo>Building revision: ${revision1}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="dist.jar.name" value="${dist.jar.name}-${revision1}.jar"/>
        </antcall>

        <echo>Building revision: ${revision2}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="dist.jar.name" value="${dist.jar.name}-${revision2}.jar"/>
        </antcall>

        <zip destfile="${build.dir}/team-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${dist.jar.name}-${revision1}.jar"/>
                <include name="${dist.jar.name}-${revision2}.jar"/>
            </fileset>
        </zip>

        <echo message="––– TEAM-BUILDING DONE –––"/>
    </target>

</project>