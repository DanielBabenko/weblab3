<project name="OPI3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <path id="classpath.source">
        <fileset dir="src/main/lib" includes="**/*.jar"/>
    </path>

    <path id="classpath.testSource">
        <fileset dir="src/test/lib" includes="**/*.jar"/>
    </path>


    <!-- Clean -->
    <target name="clean">
        <delete dir="${build.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="––– CLEAN DONE –––"/>
    </target>

    <!-- Compile -->
    <target name="compile" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath" source="1.8"
               includeantruntime="false"/>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <echo message="––– COMPILE DONE –––"/>
    </target>

    <!-- Build -->
    <target name="build" depends="compile">
        <copy todir="${artifact.dir}" >
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${artifact-lib.dir}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <jar destfile="${build.dir}/${ant.project.name}.jar">
            <fileset dir="${artifact.dir}"/>
            <manifest>
                <attribute name="Created-By" value="Artyom + Anvar" />
                <attribute name="Manifest-Version" value="1.0" />
                <attribute name="Main-Class" value="NoClass" />
            </manifest>
        </jar>
        <echo message="––– BUILD DONE –––"/>
    </target>

    <!-- Test -->
    <target name="test" depends="compile">
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false"
               classpathref="classpath.test"/>
        <junit printsummary="on" haltonfailure="yes">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="xml"/>
                <fileset dir="${test.dir}" includes="*Test*.java"/>
            </batchtest>
        </junit>
        <echo message="––– TESTS COMPLETED –––"/>
    </target>

    <!-- XML -->
    <target name="xml">
        <xmlvalidate lenient="true">
            <fileset dir="${basedir}">
                <include name="**/*.xml" />
            </fileset>
        </xmlvalidate>
        <echo message="––– XML VALIDATION COMPLETED –––"/>
    </target>

    <!-- ENV -->
    <target name="env" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath" source="${compile.version}"
               includeantruntime="false">
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>
        <antcall target="build"/>
        <exec executable="bash">
            <arg value="env.sh"/>
        </exec>
        <echo message="––– ENV COMPLETED –––"/>
    </target>

    <!-- Native2ASCII -->
    <target name="native2ascii">
        <native2ascii encoding="UTF-8" dest="${build.dir}/webapp/WEB-INF/classes" src="${resources.dir}">
            <include name="**/*.properties" />
        </native2ascii>
        <echo message="––– NATIVE2ASCII COMPLETED –––"/>
    </target>

    <!-- Doc -->
<!--    <target name="doc" depends="build">-->
<!--        <mkdir dir="docs"/>-->
<!--        <signjar jar="${build.dir}/${ant.project.name}.jar"-->
<!--                 alias="ant_keystore"-->
<!--                 storepass="msc114"-->
<!--                 keystore="keystore"-->
<!--                 sigalg="MD5withRSA"-->
<!--                 digestalg="SHA1"/>-->
<!--        <javadoc-->
<!--                destdir="docs"-->
<!--                author="true"-->
<!--                version="true"-->
<!--                use="true">-->
<!--            <classpath>-->
<!--                <path refid="compile.path"/>-->
<!--            </classpath>-->
<!--            <fileset dir="${src.main.dir}"/>-->
<!--        </javadoc>-->
<!--        <jar destfile="${build.dir}/${ant.project.name}.jar"-->
<!--             basedir="docs"-->
<!--             update="true">-->
<!--        </jar>-->
<!--    </target>-->

    <target name="doc" depends="build">
        <mkdir dir="${doc.dir}"/>
        <javadoc destdir="${doc.dir}">
            <classpath refid="classpath.source"/>
            <classpath refid="classpath.testSource"/>
            <fileset dir="${source.dir}" includes="**/*.java"/>
        </javadoc>
        <jar destfile="${dist.jar}" update="true">
            <fileset dir="." includes="${doc.dir}/**"/>
        </jar>
<!--        <signjar alias="web3"-->
<!--                 storepass="webWeb"-->
<!--                 keystore="${keystore}"-->
<!--                 sigalg="MD5withRSA"-->
<!--                 digestalg="SHA1">-->
<!--            <path>-->
<!--                <file file="${dist.jar}"/>-->
<!--            </path>-->
<!--        </signjar>-->
    </target>

    <!-- SCP -->
    <target name="scp" depends="build">
        <sshexec
                host="${host}"
                port="${port}"
                username="${remote_user}"
                password="${remote_password}"
                command="mkdir -p ${remote_dir_path}"
                trust="true" />
        <scp
                file="${dist.jar}"
        todir="${remote_user}@${host}:${remote_dir_path}"
        password="${remote_password}"
        port="${port}"/>
    </target>

    <!-- History -->
    <target name="history">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="previous.revision" value="HEAD"/>
        <property name="found.working.revision" value="false"/>

        <taskdef resource="net/sf/antcontrib/antcontrib.properties">
            <classpath>
                <pathelement location="${lib.dir}/ant-contrib.jar"/>
            </classpath>
        </taskdef>

        <foreach list="${previous.revision}" param="revision" target="find-working-revision">
            <param name="revision" value="${previous.revision}"/>
        </foreach>
    </target>

    <target name="find-working-revision">
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision}"/>
        </exec>

        <trycatch>
            <try>
                <antcall target="compile"/>
                <echo>Found working revision: ${revision}</echo>
                <exec executable="git" output="${build.dir}/diff.txt" failonerror="false">
                    <arg value="diff"/>
                    <arg value="${revision}~1"/>
                    <arg value="${current.revision}"/>
                </exec>
                <exec executable="git" failonerror="false">
                    <arg value="checkout"/>
                    <arg value="${current.revision}"/>
                </exec>
                <fail message="Compilation fixed. Please check diff.txt for changes."/>
            </try>
            <catch>
                <echo>Compilation failed on revision: ${revision}. Checking previous revision...</echo>
            </catch>
        </trycatch>
    </target>

    <!-- Report -->
    <target name="report" depends="test">
        <mkdir dir="${build.dir}/test-reports"/>

        <junitreport todir="${build.dir}/test-reports">
            <fileset dir="${build.dir}/test-results">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build.dir}/test-reports/html"/>
        </junitreport>

        <exec executable="git" failonerror="false">
            <arg value="add"/>
            <arg value="${build.dir}/test-reports"/>
        </exec>

        <exec executable="git" failonerror="false">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Automated commit of JUnit test report"/>
        </exec>
    </target>

    <!-- Team -->
    <target name="team">
        <exec executable="git" outputproperty="current.revision" failonerror="false">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <property name="revision1" value="${current.revision}~1"/>
        <property name="revision2" value="${current.revision}~2"/>

        <echo>Building revision: ${revision1}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision1}"/>
        </exec>
        <antcall target="build">
            <param name="dist.jar.name" value="${dist.jar.name}-${revision1}.jar"/>
        </antcall>

        <echo>Building revision: ${revision2}</echo>
        <exec executable="git" failonerror="false">
            <arg value="checkout"/>
            <arg value="${revision2}"/>
        </exec>
        <antcall target="build">
            <param name="dist.jar.name" value="${dist.jar.name}-${revision2}.jar"/>
        </antcall>

        <zip destfile="${build.dir}/team-revisions.zip">
            <fileset dir="${build.dir}">
                <include name="${dist.jar.name}-${revision1}.jar"/>
                <include name="${dist.jar.name}-${revision2}.jar"/>
            </fileset>
        </zip>

        <echo message="––– TEAM-BUILDING DONE –––"/>
    </target>

</project>